// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  role      Role      @default(USER)
  password  String
  updatedAt DateTime  @updatedAt()
  createdAt DateTime  @default(now())
  bookings  Booking[]
  houseId   Int
  houses    House     @relation(fields: [houseId], references: [id], onDelete: Cascade)
  profile   Profile?
  // responses Response[]
}

model House {
  id           Int           @id @default(autoincrement())
  email        String?
  updatedBy    String
  updatedAt    DateTime      @updatedAt()
  createdAt    DateTime      @default(now())
  user         User[]
  appointments Appointment[]
  profile      Profile?
  // forms        Form[]
}

model Profile {
  id          Int     @id @default(autoincrement())
  name        String
  image_url   String?
  phoneNumber Int?
  address     String?
  userEmail   String  @unique
  houseId     Int     @unique
  house       House   @relation(fields: [houseId], references: [id])
  user        User    @relation(fields: [userEmail], references: [email])
}

model Appointment {
  id             Int       @id @default(autoincrement())
  name           String
  description    String
  price          Float
  date           DateTime
  startTime      String
  endTime        String
  peopleCapacity Int
  bookedSlots    Int
  updatedBy      String
  updatedAt      DateTime  @updatedAt()
  createdAt      DateTime  @default(now())
  bookings       Booking[]
  houseId        Int
  house          House     @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Booking {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  userId        Int
  updatedBy     String
  updatedAt     DateTime    @updatedAt()
  createdAt     DateTime    @default(now())
  appointments  Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users         User        @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
